name: "task_decomposer"
version: "1.0.0"
description: "Analyzes a task and generates a decomposition strategy"
author: "LLMaestro Team"
git_metadata:
  created:
    commit: "initial"
    author: "system"
  last_modified:
    commit: "initial"
    author: "system"

metadata:
  type: "task_decomposer"
  model_requirements:
    min_tokens: 4000
    preferred_models: ["gpt-4", "claude-2"]
  expected_response:
    format: "json"
    schema: >
      {
        "strategy": {
          "name": "string - unique identifier for this strategy",
          "description": "string - explanation of the decomposition approach",
          "max_parallel": "integer - recommended number of parallel subtasks"
        },
        "decomposition": {
          "method": "string - python function that implements the decomposition",
          "aggregation": "string - python function that implements result aggregation"
        },
        "validation": {
          "input_requirements": ["array of strings - requirements for input data"],
          "output_format": "string - description of expected output format"
        }
      }
  decomposition:
    strategy: "custom"
    max_parallel: 1
    aggregation: "custom"

system_prompt: >
  You are an expert system architect specializing in task decomposition. Your role is to analyze tasks and design strategies to break them down into manageable subtasks.

  When designing a decomposition strategy:
  1. Consider the nature of the input data and task requirements
  2. Design a strategy that maximizes parallel processing while maintaining coherence
  3. Ensure the aggregation method can properly combine subtask results
  4. Provide clear validation requirements for input and output

  Your response should include:
  1. A clear strategy description with a unique name and parallel processing recommendations
  2. Python functions for decomposition and aggregation that can be dynamically executed
  3. Validation requirements for input data and output format

  The decomposition method should:
  - Take a Task object and return List[SubTask]
  - Handle various input data types appropriately
  - Include error handling and validation

  The aggregation method should:
  - Take List[Any] and return the combined result
  - Handle partial or failed results gracefully
  - Maintain the expected output format

user_prompt: >
  Task to analyze:
  Type: {task_type}
  Description: {description}
  Input Format: {input_format}
  Expected Output: {expected_output}
  Additional Requirements: {requirements}

examples:
  - input:
      task_type: "document_clustering"
      description: "Group a large collection of documents by topic and create summaries for each cluster"
      input_format: "List of dictionaries with 'text' and 'metadata' keys"
      expected_output: "Dictionary mapping cluster IDs to summaries and document lists"
      requirements: "Must handle variable-length documents and maintain document relationships"
    expected_output: >
      {
        "strategy": {
          "name": "hierarchical_clustering",
          "description": "Two-phase approach: first cluster documents using embeddings, then summarize clusters",
          "max_parallel": 10
        },
        "decomposition": {
          "method": "def decompose_clustering(task: Task) -> List[SubTask]:\n    documents = task.input_data\n    if not isinstance(documents, list):\n        raise ValueError(\"Input must be a list of documents\")\n\n    # Phase 1: Generate embeddings and initial clusters\n    embedding_tasks = []\n    batch_size = 20\n    for i in range(0, len(documents), batch_size):\n        batch = documents[i:i+batch_size]\n        embedding_tasks.append(\n            SubTask(\n                id=str(uuid.uuid4()),\n                type=\"embedding_generation\",\n                input_data={\"documents\": batch},\n                parent_task_id=task.id\n            )\n        )\n\n    # Phase 2: Create cluster summaries\n    cluster_tasks = []\n    for cluster_id, docs in clusters.items():\n        cluster_tasks.append(\n            SubTask(\n                id=str(uuid.uuid4()),\n                type=\"cluster_summarization\",\n                input_data={\n                    \"cluster_id\": cluster_id,\n                    \"documents\": docs\n                },\n                parent_task_id=task.id\n            )\n        )\n\n    return embedding_tasks + cluster_tasks",
          "aggregation": "def aggregate_clustering_results(results: List[Any]) -> Dict[str, Any]:\n    # Separate embedding results from summaries\n    embedding_results = [r for r in results if \"embeddings\" in r]\n    summary_results = [r for r in results if \"summary\" in r]\n\n    # Combine all embeddings and cluster documents\n    all_embeddings = []\n    for r in embedding_results:\n        all_embeddings.extend(r[\"embeddings\"])\n\n    # Create final clustering result\n    clusters = {}\n    for r in summary_results:\n        cluster_id = r[\"cluster_id\"]\n        clusters[cluster_id] = {\n            \"summary\": r[\"summary\"],\n            \"documents\": r[\"documents\"],\n            \"keywords\": r.get(\"keywords\", [])\n        }\n\n    return {\n        \"clusters\": clusters,\n        \"statistics\": {\n            \"num_clusters\": len(clusters),\n            \"total_documents\": sum(len(c[\"documents\"]) for c in clusters.values())\n        }\n    }"
        },
        "validation": {
          "input_requirements": [
            "Input must be a list of dictionaries",
            "Each dictionary must have 'text' and 'metadata' keys",
            "Text must be non-empty strings",
            "Collection must have at least 2 documents"
          ],
          "output_format": "Dictionary with 'clusters' mapping cluster IDs to cluster information and 'statistics' with clustering metrics"
        }
      }
