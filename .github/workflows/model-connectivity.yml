name: Model Connectivity Tests

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'src/llm/**'
      - 'tests/test_llm/**'
      - '.github/workflows/model-connectivity.yml'

jobs:
  test-model-connectivity:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      id: cache
      with:
        path: ./.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev --no-interaction

    - name: Install additional dependencies
      run: |
        poetry add sqlalchemy

    - name: Run connectivity tests
      id: run_tests
      continue-on-error: true
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        mkdir -p test-results
        poetry run pytest tests/test_llm/test_model_connectivity.py -v --junitxml=test-results/junit.xml

    - name: Generate badges
      if: always()
      run: |
        poetry run python scripts/generate_model_badges.py
        echo "Generated badge files:"
        ls -la test-results/badges/

    - name: Validate badge JSON
      if: always()
      run: |
        for f in test-results/badges/*.json; do
          echo "Validating $f"
          cat "$f"  # Display content for debugging
          if ! jq empty "$f" 2>/dev/null; then
            echo "Invalid JSON in $f"
            exit 1
          fi
          if ! jq -e '.schemaVersion == 1 and .label != null and .message != null and .color != null' "$f" >/dev/null; then
            echo "Invalid badge schema in $f"
            exit 1
          fi
        done

    - name: Create docs directory
      if: always()
      run: |
        mkdir -p docs/badges
        cp -v test-results/badges/*.json docs/badges/
        echo "Contents of docs/badges:"
        ls -la docs/badges/

        # Create an index.html file
        cat > docs/badges/index.html << 'EOL'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Model Status Badges</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 2em; }
                .badge-list { list-style: none; padding: 0; }
                .badge-item { margin: 1em 0; }
            </style>
        </head>
        <body>
            <h1>Model Status Badges</h1>
            <ul class="badge-list">
        EOL

        for f in docs/badges/*.json; do
          if [ -f "$f" ]; then
            filename=$(basename "$f")
            echo "<li class='badge-item'><a href='$filename'>$filename</a></li>" >> docs/badges/index.html
          fi
        done

        echo "</ul></body></html>" >> docs/badges/index.html

        echo "Contents of index.html:"
        cat docs/badges/index.html

    - name: Commit and push badges
      if: always()
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        echo "Git status:"
        git status

        echo "Adding files to git:"
        git add docs/badges/

        echo "Git status after add:"
        git status

        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "chore: update model connectivity badges"
          echo "Pushing changes..."
          git push origin HEAD:main
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results/
        retention-days: 5
