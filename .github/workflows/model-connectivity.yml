name: Model Connectivity Tests

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'src/llm/**'
      - 'tests/test_llm/**'
      - '.github/workflows/model-connectivity.yml'

jobs:
  test-model-connectivity:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      id: cache
      with:
        path: ./.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev --no-interaction

    - name: Install additional dependencies
      run: |
        poetry add sqlalchemy

    - name: Run connectivity tests
      id: run_tests
      continue-on-error: true
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        mkdir -p test-results
        poetry run pytest tests/test_llm/test_model_connectivity.py -v --junitxml=test-results/junit.xml

    - name: Generate badges
      if: always()
      run: |
        poetry run python scripts/generate_model_badges.py

    - name: Validate badge JSON
      if: always()
      run: |
        for f in test-results/badges/*.json; do
          echo "Validating $f"
          if ! jq empty "$f" 2>/dev/null; then
            echo "Invalid JSON in $f"
            exit 1
          fi
          if ! jq -e '.schemaVersion == 1 and .label != null and .message != null and .color != null' "$f" >/dev/null; then
            echo "Invalid badge schema in $f"
            exit 1
          fi
        done

    - name: Create docs directory
      if: always()
      run: |
        mkdir -p docs/badges
        cp test-results/badges/*.json docs/badges/
        # Create an index.html file to make the directory browsable
        echo "<html><body><h1>Model Status Badges</h1><ul>" > docs/badges/index.html
        for f in docs/badges/*.json; do
          echo "<li><a href='$(basename $f)'>$(basename $f)</a></li>" >> docs/badges/index.html
        done
        echo "</ul></body></html>" >> docs/badges/index.html

    - name: Commit and push badges
      if: always()
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add docs/badges/
        git commit -m "chore: update model connectivity badges" || echo "No changes to commit"
        git push

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: test-results/

    - name: Report Status
      if: always()
      uses: ravsamhq/notify-slack-action@v2
      with:
        status: ${{ steps.run_tests.outcome }}
        notification_title: 'Model Connectivity Test Results'
        message_format: '{emoji} *{workflow}* {status_message}'
        footer: '<{run_url}|View Run>'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
